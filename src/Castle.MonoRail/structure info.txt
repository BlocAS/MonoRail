namespace structure


First things first


	Our users can be grouped into three distinct sets:
	
	- Just users of the framework (1st level
	- User + extender (creating custom actionresults, helpers)
	- Advanced users (uses the extensibility points to augment/customize the framework behavior)

	We really want that the first group have a terrific experience. 
	Therefore, the common used types required by them, should exist in this namespace.
	


Castle.MonoRail
===============

	This namespace contains types that dont follow the convention defined below. 
	That is intentional as this is the namespace for vanilla users (see above). 
	It should therefore be very user-friendly. 
		
	
	IServiceRegistry ??
	ActionResult *
	Helpers * 
	Base classes for filters/controllers/authentication/authorization


Castle.MonoRail.Serialization
=============================

	IModelSerializer<'a> and default implementations for Xml,Json,Form

	
Castle.MonoRail.Hosting
=======================

	IComposableHandler and abstract ComposableHandler


Castle.MonoRail.Hosting.Mvc
===========================

	MvcComposableHandler
	PipelineRunner
	Completely agnostic of the programming model
	

Castle.MonoRail.Hosting.Mvc.Typed
=================================

	Programming model that relies on types


Castle.MonoRail.Mvc.ViewEngines
===============================

	View engines are useful to Mvc in general, *should* not be coupled to hosting or programming model


Castle.MonoRail.Mvc.ViewEngines.<ViewEngineName>
================================----------------

	View engine implementations should obey this namespace convention

	
Castle.MonoRail.Framework	
=========================

	General extensibility of the framework foundation



